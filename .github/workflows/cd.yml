name: CICD Test

on:
  pull_request:
    branches:
      - main
      
env:
  AWS_REGION: ap-northeast-2
  AWS_S3_BUCKET: memopetbucket
  AWS_CODE_DEPLOY_APPLICATION: cicd-memopet-CD
  AWS_CODE_DEPLOY_GROUP: cicd-memopet-CD-group

jobs:
  build-with-gradle:
    runs-on: ubuntu-20.04
      
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    
    # 환경별 yml 파일 생성(1) - application.yml
    - name: make application.yml
      shell: bash
      run: |
          touch ./src/main/resources/application.yml 
          echo "${{ secrets.YML }}" > ./application.yml  # github actions에서 설정한 값을 application.yml 파일에 쓰기
      
    - name: make jwt.yml
      shell: bash
      run: |
          touch src/main/resources/jwt.yml 
          echo "${{ secrets.JWT_YML }}" > src/main/resources/jwt.yml  # github actions에서 설정한 값을 application.yml 파일에 쓰기
          # gradle caching - 빌드 시간 향상
          
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: gradlew에 실행 권한 부여
      run: chmod +x ./gradlew
      
    # 추가
    - name: Cleanup Gradle Cache
      # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
      # Restoring these files from a GitHub Actions cache might cause problems for future builds.
      if: ${{ always() }}
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties
        
    - name: 프로젝트 빌드
      run: ./gradlew clean build -x test
      
      
    - name: AWS credential 설정
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ env.AWS_REGION }}
        aws-access-key-id: ${{ secrets.CICD_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.CICD_SECRET_KEY }}
        
    - name: S3에 업로드
      run: aws deploy push --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} --ignore-hidden-files --s3-location s3://$AWS_S3_BUCKET/cicdtest/$GITHUB_SHA.zip --source .
    - name: EC2에 배포
      run: aws deploy create-deployment --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }} --s3-location bucket=$AWS_S3_BUCKET,key=cicdtest/$GITHUB_SHA.zip,bundleType=zip
