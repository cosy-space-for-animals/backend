name: Java CI with Gradle

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  checks: write
  pull-requests: write

jobs:
  test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    # gradle caching - 빌드 시간 향상
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    # Gradle wrapper 파일 실행 권한주기
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
        
    # Gradle test를 실행한다
    - name: Test with Gradle
      run: ./gradlew --info test

    # 테스트 후 Result를 보기위해 Publish Unit Test Results step 추가
    - name: 테스트 결과 Report
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()  # 테스트가 실패하여도 Report를 보기 위해 `always`로 설정
      with:
         files: 'build/test-results/**/*.xml'
    
    - name: 테스트 실패 Comment
      uses: mikepenz/action-junit-report@v3
      if: always()
      with:
        report_paths: 'build/test-results/test/TEST-*.xml'


        
    # 추가
    - name: Cleanup Gradle Cache
      # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
      # Restoring these files from a GitHub Actions cache might cause problems for future builds.
      if: ${{ always() }}
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties

    # 환경별 yml 파일 생성(1) - application.yml
    - name: make application.yml
      if: |
        contains(github.ref, 'main') ||
        contains(github.ref, 'develop')
      run: |
        cd ./src/main/resources # resources 폴더로 이동
        touch ./application.yml # application.yml 생성
        echo "${{ secrets.YML }}" > ./application.yml # github actions에서 설정한 값을 application.yml 파일에 쓰기
      shell: bash
      
    # 환경별 yml 파일 생성(2) - dev
    - name: make application-dev.yml
      if: contains(github.ref, 'develop')
      run: |
        cd ./src/main/resources
        touch ./application-dev.yml
        echo "${{ secrets.YML_DEV }}" > ./application-dev.yml
      shell: bash
    
    # 환경별 yml 파일 생성(3) - prod
    - name: make application-prod.yml
      if: contains(github.ref, 'main')
      run: |
        cd ./src/main/resources
        touch ./application-prod.yml
        echo "${{ secrets.YML_PROD }}" > ./application-prod.yml
      shell: bash


    # 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: build

    
    # docker build & push to develop
    - name: Docker build & push to dev
      if: contains(github.ref, 'develop')
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME_ID }}/memopet-dev .
        docker push ${{ secrets.DOCKER_USERNAME_ID }}/memopet-dev
